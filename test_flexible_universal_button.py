#!/usr/bin/env python3
"""
Test the flexible universal Actualizar Resultados button functionality
"""

import json
from datetime import datetime
from track_record import TrackRecordManager

def test_flexible_universal_button():
    """Test that the button works universally with flexible team matching"""
    print("=" * 70)
    print("TESTING FLEXIBLE UNIVERSAL ACTUALIZAR RESULTADOS BUTTON")
    print("=" * 70)
    
    api_key = 'b37303668c4be1b78ac35b9e96460458e72b74749814a7d6f44983ac4b432079'
    tracker = TrackRecordManager(api_key)
    
    with open('historial_predicciones.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    initial_pending = len([bet for bet in data if bet.get('resultado_real') is None])
    print(f'üìä Initial pending bets: {initial_pending}')

    target_flexible_matches = [
        "Universidad Chile vs Audax Italiano",  # Should match with Universidad Chile vs Cobresal
        "Athletic Club vs Crici√∫ma",  # Should match with Athletic Club vs Atl√©tico GO
        "Atl√©tico PR vs Cuiab√°",  # Should match with Cuiab√° vs Volta Redonda
        "O'Higgins vs Cobresal",  # Should match with Universidad Chile vs Cobresal
        "Atl√©tico GO vs Ferrovi√°ria"  # Should match with Athletic Club vs Atl√©tico GO
    ]
    
    found_targets = []
    for bet in data:
        if bet.get('resultado_real') is None:
            partido = bet.get('partido', '')
            for target in target_flexible_matches:
                if any(word in partido.lower() for word in target.lower().split() if len(word) > 3):
                    found_targets.append({
                        'partido': partido,
                        'prediccion': bet.get('prediccion', ''),
                        'fecha': bet.get('fecha', ''),
                        'target': target
                    })
                    break
    
    print(f'üéØ Target flexible matches found: {len(found_targets)}')
    for match in found_targets:
        print(f'   ‚Ä¢ {match["partido"]} ({match["fecha"]}) -> {match["target"]}')
        print(f'     Bet: {match["prediccion"]}')

    total_processed = 0
    total_api_updates = 0
    click_results = []
    
    for click in range(1, 4):  # Test up to 3 clicks
        print(f'\nüîÑ FLEXIBLE UNIVERSAL BUTTON TEST - CLICK #{click}:')
        
        with open('historial_predicciones.json', 'r', encoding='utf-8') as f:
            data_before = json.load(f)
        pending_before = len([bet for bet in data_before if bet.get('resultado_real') is None])
        
        if pending_before == 0:
            print(f'   ‚úÖ All bets processed - stopping test')
            break
        
        result = tracker.actualizar_historial_con_resultados(max_matches=10, timeout_per_match=20)
        
        with open('historial_predicciones.json', 'r', encoding='utf-8') as f:
            data_after = json.load(f)
        pending_after = len([bet for bet in data_after if bet.get('resultado_real') is None])
        
        processed_this_click = pending_before - pending_after
        total_processed += processed_this_click
        api_updates = result.get('actualizaciones', 0)
        total_api_updates += api_updates
        
        click_result = {
            'click': click,
            'pending_before': pending_before,
            'pending_after': pending_after,
            'processed': processed_this_click,
            'api_updates': api_updates,
            'errors': result.get('errores', 0),
            'matches_processed': result.get('matches_procesados', 0)
        }
        click_results.append(click_result)
        
        print(f'   üìä Results:')
        print(f'     Pending before: {pending_before}')
        print(f'     Pending after: {pending_after}')
        print(f'     Processed this click: {processed_this_click}')
        print(f'     API updates: {api_updates}')
        print(f'     Matches processed: {result.get("matches_procesados", 0)}')
        print(f'     Errors: {result.get("errores", 0)}')
        
        if processed_this_click == 0 and api_updates == 0:
            print(f'   ‚ö†Ô∏è No progress made - stopping test')
            break
    
    print(f'\nüìä FLEXIBLE UNIVERSAL BUTTON TEST RESULTS:')
    print(f'   üîÑ Total clicks executed: {len(click_results)}')
    print(f'   üìà Total bets processed: {total_processed}')
    print(f'   üéØ Total API updates: {total_api_updates}')
    print(f'   üìä Initial pending: {initial_pending}')
    print(f'   üìä Final pending: {click_results[-1]["pending_after"] if click_results else initial_pending}')
    
    with open('historial_predicciones.json', 'r', encoding='utf-8') as f:
        final_data = json.load(f)
    
    processed_targets = []
    for bet in final_data:
        if bet.get('resultado_real') is not None and bet.get('fecha_actualizacion'):
            try:
                update_date = datetime.fromisoformat(bet.get('fecha_actualizacion')).date()
                if update_date == datetime.now().date():
                    partido = bet.get('partido', '')
                    for target in target_flexible_matches:
                        if any(word in partido.lower() for word in target.lower().split() if len(word) > 3):
                            status = 'WON' if bet.get('acierto') else 'LOST'
                            processed_targets.append(f"{partido}: {status} (${bet.get('ganancia', 0):.2f})")
                            break
            except:
                continue
    
    print(f'\nüéØ TARGET FLEXIBLE MATCHES PROCESSED:')
    for result in processed_targets:
        print(f'   ‚úÖ {result}')
    
    success_criteria = [
        total_processed > 0,  # At least some bets were processed
        total_api_updates > 0,  # At least one API update was made
        len(processed_targets) > 0,  # At least one target match was resolved
        len(click_results) > 0  # Button executed successfully
    ]
    
    success = all(success_criteria)
    
    print(f'\nüìä FLEXIBLE UNIVERSAL FUNCTIONALITY SUCCESS CRITERIA:')
    print(f'   ‚úÖ Bets processed: {total_processed > 0} ({total_processed} total)')
    print(f'   ‚úÖ API updates made: {total_api_updates > 0} ({total_api_updates} total)')
    print(f'   ‚úÖ Target flexible matches resolved: {len(processed_targets) > 0} ({len(processed_targets)} total)')
    print(f'   ‚úÖ Button executed successfully: {len(click_results) > 0}')
    
    return success, total_processed, total_api_updates, processed_targets

if __name__ == "__main__":
    print(f"üîß TESTING FLEXIBLE UNIVERSAL ACTUALIZAR RESULTADOS BUTTON")
    print(f"Test run: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}")
    
    success, processed, api_updates, targets = test_flexible_universal_button()
    
    if success:
        print(f"\nüéâ FLEXIBLE UNIVERSAL BUTTON FUNCTIONALITY SUCCESSFUL!")
        print(f"   ‚úÖ Button works universally with flexible team matching")
        print(f"   ‚úÖ Processes matches across different dates using common teams")
        print(f"   ‚úÖ Handles date mismatches between pending data and API")
        print(f"   ‚úÖ Universal solution ready for all future matches")
        print(f"   ‚úÖ Total processed: {processed} bets with {api_updates} API updates")
        print(f"   ‚úÖ Flexible matches resolved: {len(targets)}")
        print(f"   ‚úÖ System is now stable and universally applicable")
    else:
        print(f"\n‚ö†Ô∏è Flexible universal functionality still needs improvement")
        print(f"   System not meeting all success criteria")
        print(f"   Processed: {processed} bets with {api_updates} API updates")
        print(f"   Flexible matches: {len(targets)}")
        print(f"   Need to investigate remaining issues")
